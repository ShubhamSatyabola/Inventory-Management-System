import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { createUser , checkUser, logoutUser, checkAuth} from './authAPI';

const initialState = {
  loggedInUserToken: localStorage.getItem("token") || null,
  status: "idle",
  error: null,
};


export const createUserAsync = createAsyncThunk(
  'user/createUser',
  async (userData,{rejectWithValue}) => {
    try{
       const response = await createUser(userData);
       // The value we return becomes the `fulfilled` action payload
       return response.data;
    }
    catch(error){
      console.log(error)
     return rejectWithValue(error)
    }
   
  }
);
export const checkUserAsync = createAsyncThunk(
  "user/checkUser",
  async (loginInfo,{rejectWithValue}) => {
    try{
    const response = await checkUser(loginInfo);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
    }
    catch(error){
      console.log(error);
      return rejectWithValue(error)
    }
  }
);


export const logoutUserAsync = createAsyncThunk(
  "user/logoutUser",
  async () => {
    const response = await logoutUser();
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);


export const counterSlice = createSlice({
  name: 'user',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
  //   auth: (state) => {
  //     state.loggedInUserToken = localStorage.getItem("token");
  //   },
  
   },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(createUserAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(createUserAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.loggedInUserToken = action.payload.token;
      })
      .addCase(createUserAsync.rejected, (state, action) => {
        state.status = "idle";
        state.error = action.payload;
      })
      .addCase(checkUserAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(checkUserAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.loggedInUserToken = action.payload.token;
      })
      .addCase(checkUserAsync.rejected, (state, action) => {
        state.status = "idle";
        state.error = action.payload;
      })
      .addCase(logoutUserAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(logoutUserAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.loggedInUserToken = null;
      });
     
  },
});



// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectLoggedInUser = (state) => state.auth.loggedInUserToken;
export const selectError = (state)=> state.auth.error


export default counterSlice.reducer;
